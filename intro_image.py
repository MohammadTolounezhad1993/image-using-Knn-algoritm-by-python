# -*- coding: utf-8 -*-
"""intro image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MX5ulu25yknQ-p5eURoTbsiuk5HD3BKc

To run this notebook, you need to install the matplotlib and numpy libraries. To do so, connect to the internet and enter the following commands in the terminal
"""

# Import matplotlib
import matplotlib.pyplot as plt

# Import numpy
import numpy as np

""""Load image from disk"
"""

# Load the image
data = np.array(plt.imread('/content/drive/MyDrive/sign.jpg'))

""""Display image"
"""

# Display the image
plt.imshow(data)
plt.show()

""""Image data" & edit

 To load the matrix, we assign a name for the matrix.
 To print a specific cell, we use the following command.
 We use `np.array` to modify it. In fact, we create a new array from our values.
 To modify the image, we use the following command, which we pass and create a new array.

If you need any further assistance with the code or more details, feel free to ask.

"For example, we change row by row, column by column, and levels (first channel, second channel, third channel). For instance, all channels of this row and columns should be set to 255."
Let me know if you'd like further clarifications.

Pixel value of a specific cell
"""

# Load the image
data = np.array(plt.imread('/content/drive/MyDrive/sign.jpg'))

b=np.array(data)

b[1,2,0] = 23

data[500:2100,500:2200,:] = 255

# Display the image
plt.imshow(data)
plt.show()

data[500:2100,500:2200,:] = 0

# Display the image
plt.imshow(data)
plt.show()

"""

"Set all rows and columns of channel 2 to zero (this means we have set the red and blue channels to zero). The image becomes a green translucent color. This means green light passes through while the blue and red colors are filtered out."

"""

# Load the image
data = np.array(plt.imread('/content/drive/MyDrive/sign.jpg'))

data[:,:,0] = 0
data[:,:,2] = 0

# Display the image
plt.imshow(data)
plt.show()

"""

"If we want to make the image grayscale:
- The command `cmap` is used to print the image in grayscale. It tries to apply grayscale, but if it fails, the image remains colored. However, it won’t be in color. What should we do?
- A grayscale image only has rows and columns, meaning it doesn’t have color channels.
- To convert a color image to grayscale, we need to calculate the average (the entire matrix is summed together)."

"""

data_gray = data[:,:,0] //3 + data[:,:,1] //3 + data[:,:,2] //3

plt.imshow(data_gray, cmap='gray')
plt.show()

"""

"The new grayscale image is a two-dimensional matrix. If we check cell (5, 10), it will give us a single number."

The `rgb2gray(rgb)` function converts an RGB image into a grayscale image. It calculates the brightness of each pixel by performing a dot product between the red, green, and blue channel values and the weights `[0.299, 0.587, 0.114]`. The result is a two-dimensional image that contains only brightness values for each pixel, represented as integers."""

data_gray[5,10]

def rgb2gray(rgb):
    return np.dot(rgb[...,:3], [0.299, 0.587, 0.114]).astype(int)

img = plt.imread('/content/drive/MyDrive/t-shirt.jpg')
tshirt = rgb2gray(img)

tshirt.shape

plt.imshow(tshirt, cmap = plt.get_cmap('gray'))
plt.show()

"""

Viewing the value of a specific pixel.

"""

tshirt[250, 200]

""""Image editing"
"""

tshirt[200:400, 300:400]=0
plt.imshow(tshirt, cmap = plt.get_cmap('gray'))
plt.show()